service: shoplift

frameworkVersion: ">=1.20.0 <2.0.0"

custom:
  requestsTable: requestsTable
  labourTable: labourTable
  sqsTable: queueInfoTable
  sqs: messages.fifo

provider:
  name: aws
  runtime: nodejs6.10
  versionFunctions: false
# you can overwrite defaults here
  stage: dev
  region: us-east-1
  environment:
    SHOPIFY_SHOPNAME: ${file(../config.json):shopName}
    SHOPIFY_APIKEY: ${file(../config.json):apiKey}
    SHOPIFY_PASSWORD: ${file(../config.json):password}
    SHOPIFY_SECRET: ${file(../config.json):secret}
    DYNAMODB_REQTABLE: ${self:custom.requestsTable}
    DYNAMODB_QUEUE_TABLE: ${self:custom.sqsTable}
    DYNAMODB_LABOUR_TABLE: ${self:custom.labourTable}
    SQS_QUEUE: ${self:custom.sqs}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_REQTABLE}"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LABOUR_TABLE}"
    - Effect: Allow
      Action:
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
      Resource: arn:aws:sqs:*:*:${self:custom.sqs}
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  # apiWorker:
  #   handler: apiWorker.worker
  #   memorySize: 128
  #   timeout: 50
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Query
  #         - dynamodb:Scan
  #         - dynamodb:GetItem
  #         - dynamodb:PutItem
  #         - dynamodb:UpdateItem
  #         - dynamodb:DeleteItem
  #       Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_QUEUE_TABLE}"
  # addTestMessages:
  #   handler: apiWorker.addTestMessages
  #   memorySize: 128
  # clearWorkingFlag:
  #   handler: apiWorker.clearWorkingFlag
  #   memorySize: 128

  analytics:
    handler: client.analytics
    memorySize: 128
    events:
      - http:
          path: shoplift-analytics.js
          method: get
  shopifyWebhook:
    handler: handler.shopifyWebhook
    memorySize: 128
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: webhook
          method: post
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # disable SQS for now
    # Messages:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.sqs}
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     MessageRetentionPeriod: 1209600 # 14 days
    #     VisibilityTimeout: 60
    requestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.requestsTable}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    labourTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.labourTable}
        KeySchema:
          - AttributeName: topic
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: topic
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    # disable queue for now
    # QueueTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:custom.sqsTable}
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     TimeToLiveSpecification:
    #       AttributeName: ttl
    #       Enabled: true
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
